# üè• Triage Web App

Aplicaci√≥n web para la gesti√≥n de triages m√©dicos, desarrollada con una arquitectura **hexagonal** basada en **microservicios**. Integra tecnolog√≠as modernas como **Node.js**, **React + Vite**, **MongoDB** y **Python** para procesamiento de lenguaje natural.

## üß© Tecnolog√≠as utilizadas

- üîß Backend: Node.js + Express
- üñ•Ô∏è Frontend: React + Vite
- üêç M√≥dulos de procesamiento: Python (NLP y l√≥gica de triage)
- üóÑÔ∏è Base de datos: MongoDB
- üê≥ Contenerizaci√≥n: Docker + Docker Compose

## ‚öôÔ∏è Estructura del proyecto

```
triage_web/
‚îú‚îÄ‚îÄ backend/        ‚Üí API RESTful en Node.js (Express + Mongoose)
‚îú‚îÄ‚îÄ frontend/       ‚Üí Interfaz web en React (Vite)
‚îú‚îÄ‚îÄ python/         ‚Üí M√≥dulos de procesamiento de texto y c√°lculo de triage en Python
‚îú‚îÄ‚îÄ docker-compose.yml
‚îî‚îÄ‚îÄ README.md
```

## üöÄ C√≥mo ejecutar el proyecto

### üñ•Ô∏è Modo local

1. Clona el repositorio:

```bash
git clone https://github.com/juanesmontoya/triage_web.git
cd triage_web
```

2. Instala dependencias y ejecuta cada servicio:

#### üîß Backend (Node.js)

```bash
cd backend
npm install
npm run start
```

#### üñ•Ô∏è Frontend (React)

```bash
cd ../frontend
npm install
npm run dev
```

#### üêç M√≥dulo Python

```bash
cd ../python
pip install -r requirements.txt
python main.py
```

### üê≥ Con Docker

1. Desde la ra√≠z del proyecto:

```bash
docker-compose build
docker-compose up
```

Esto levantar√° todos los servicios (backend, frontend, m√≥dulo Python, y base de datos) en contenedores separados.

## üß† Arquitectura

Este proyecto est√° dise√±ado bajo una **arquitectura hexagonal**, que promueve:

- Separaci√≥n clara entre l√≥gica de negocio y capas externas (web, base de datos, servicios)
- Independencia de frameworks
- Escalabilidad y mantenibilidad del c√≥digo

Cada m√≥dulo se comunica a trav√©s de **interfaces bien definidas**, permitiendo una f√°cil extensi√≥n e integraci√≥n de nuevos servicios.

## üìÇ Funcionalidades destacadas

- Registro y gesti√≥n de pacientes
- Ingreso de motivo de consulta por texto o voz
- Extracci√≥n autom√°tica de s√≠ntomas usando NLP en Python
- C√°lculo del nivel de triage seg√∫n s√≠ntomas detectados
- Interfaz m√©dica para edici√≥n y descarga de reportes en PDF

## üìÑ Licencia

MIT

---

> Trabajo de grado para Ingenier√≠a de Software del Tecnol√≥gico de Antioquia.
